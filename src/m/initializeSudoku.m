function sudoku = initializeSudoku(theGrid,theScopes)
% This function initializes the structure of a generalized sudoku grid, given
% the original grid of clues, and the corresponding scopes. A generalized sudoku
% grid is one not limited to a 9x9 structure (but nxn in general) and not
% limited to the common standard scopes.
%
% INPUT:
%   - grid: The original grid, the square matrix containing the clues, and NaN
%           values everywhere else.
%   - scopes: The scopes. In the standard version of sudoku, these would be the
%             rows, the columns and the nine boxes. For the standard version of
%             Sudoku, these would be generated by standardScopes(3);
%
% OUTPUT:
%   - sudoku: A struct containing the completed grid (if it is possible to solve
%             it to the end) as well as some other parameters.
%
% TERMINOLOGY:
% It may be overkill, but it makes sense to me to include in this file some of
% the most standard terminology.
%   - Grid: The board as a whole.
%   - Clues: Also known as givens, values that are given since the beginning.
%   - Scopes: A zone, whether a row, a column, a box, or any other region that
%            that need to be filled with exactly one of each of the digits.
%
% STRUCTURE FIELDS:
%  - sudoku.size:      Number representing the size (N) of the side of the grid.
%  - sudoku.viable:    Boolean, false if the grid is determined to be unviable
%  - sudoku.allowed:   Boolean, false if the proposed movement is allowed.
%  - sudoku.grid:      An NxN matrix repersenting the grid. Cells containing a
%                      NaN correspond to still empty cells.
%  - sudoku.clues:     An NxN matrix repersenting the grid of original clues.
%                      Cells containing a NaN  correspond to clues not given.
%  - sudoku.scopes:    An NxM matrix where each column represents one of the
%                      scopes to be observed by the grid. A grid contains the
%                      cell [i,j] if the corresponding column contains the
%                      number Nx(j-1)+i.
%  - sudoku.filled:    An NxN boolean matrix, where the [i,j] cell is true if
%                      the corresponding cell on the grid has already been
%                      filled.
%  - sudoku.possible:  An NxNxN boolean matrix, where the cell [i,j,k] is true
%                      if the cell [i,j] in the grid has not yet been confirmed
%                      as different from the value k.
%  - sudoku.fillscope: An NxM boolean matrix where the [k,m] cell is true if the
%                      value k has already been included in the scope m.
%  - sudoku.scopeCell: Boolean matrix N^2xM, the cell [i,k] is true if the cell
%                      corresponding to the i-th index (sub2ind style) is in the
%                      k-th scope.
%  - sudoku.clueIdx:   Array of numberscontaining the list of the indices of the
%                      original clues.
%  - sudoku.count:     Array Nx1 of numbers, where the k-th entrance represents
%                      the number of times the value k is on the grid currently.



  [N,M] = size(theScopes);
  sudoku.size = N;
  sudoku.viable = true;
  sudoku.allowed = true;
  sudoku.grid = nan(N);
  sudoku.clues = theGrid;
  sudoku.scopes = theScopes;
  sudoku.filled = false(N);
  sudoku.possible = true(N,N,N);
  sudoku.fillscop = false(N,M);
  sudoku.scopecell = false(N^2,M);
  sudoku.clueIdx = find(~isnan(sudoku.clues));
  sudoku.count = zeros(N,1);

  for i=1:N^2
    for j=1:M
  	  if ~isempty(find(sudoku.scopes(:,j)==i))
  		  sudoku.scopecell(i,j)=true;
  		end
  	end
  end

  K = length(sudoku.clueIdx);
  k = 1;
  initFlag = true;
  while initFlag
    idx = sudoku.clueIdx(k);
    val = sudoku.clues(idx);
    sudoku = insertValue(sudoku,idx,val);
    k = k + 1;
    if ~sudoku.viable
      initFlag = false;
    elseif k > K
      initFlag = false;
    end
  end
end
